import matplotlib.pyplot as plt
import numpy as np
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC

n_samples = 500
seed = 30
random_state = 170
x, y = datasets.make_blobs(n_samples=n_samples, random_state=random_state, centers=2)
transformation = [[0.6, -0.6], [-0.4, 0.8]]
x_aniso = np.dot(x, transformation)
aniso = (x_aniso, y)
dataset = [
    datasets.make_circles(n_samples=n_samples, factor=0.5, noise=0.05, random_state=seed),
    datasets.make_moons(n_samples=n_samples, noise=0.05, random_state=seed),
    datasets.make_blobs(n_samples=n_samples, cluster_std=[1.0, 0.5], random_state=seed, centers=2),
    aniso,
    datasets.make_blobs(n_samples=n_samples, random_state=seed, centers=2)
]
models = [
    ('KNeighbors', KNeighborsClassifier(n_neighbors=3)),
    ('Decision Tree', DecisionTreeClassifier(max_depth=3)),
    ('SVM', SVC(kernel='rbf', gamma=1))
]
plt.figure(figsize=(12, 12))

for model_idx, (model_name, model) in enumerate(models, 1):
    for dataset_idx in range(5):
        pos = dataset_idx * len(models) + model_idx
        x, y = dataset[dataset_idx]
        x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
        model.fit(x_train, y_train)
        y_pred = model.predict(x_test)
        temp_x = np.linspace(x[:, 0].min() - 1, x[:, 0].max() + 1, 100)
        temp_y = np.linspace(x[:, 1].min() - 1, x[:, 1].max() + 1, 100)
        xx, yy = np.meshgrid(temp_x, temp_y)
        Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
        Z = Z.reshape(xx.shape)
        plt.subplot(5, 3, pos)
        plt.contourf(xx, yy, Z, alpha=0.3, cmap='bwr')
        for i in range(len(x_train)):
            plt.scatter(x_train[i, 0], x_train[i, 1],
                        marker=['x', 'o'][y_train[i]],
                        c='blue',
                        alpha=0.7)
        for i in range(len(x_test)):
            color = 'green' if y_test[i] == y_pred[i] else 'red'
            plt.scatter(x_test[i, 0], x_test[i, 1],
                        marker=['x', 'o'][y_test[i]],
                        c=color)
        if dataset_idx == 0:
            plt.title(model_name, fontsize=14, pad=12, color='navy')


plt.tight_layout()
plt.subplots_adjust(top=0.95)
plt.show()
