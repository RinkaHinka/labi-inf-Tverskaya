import numpy as np
from random import uniform
import matplotlib.pyplot as plt

from sklearn.kernel_ridge import KernelRidge
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeRegressor

x_min = -2
x_max = 2
def f(x):
    return np.sin(x) + 0.5 * x - 0.1 * x**2
x = np.linspace(x_min, x_max, 100).reshape(-1, 1)
e = [uniform(-1, 1) for _ in range(100)]
y = []
y_ideal = []
for num, i in enumerate(x):
    y.append(f(i).item() + e[num])
    y_ideal.append(f(i).item())
y = np.array(y)
y_ideal = np.array(y_ideal)
plt.figure(figsize=(10, 12))
plt.subplot(3, 1, 1)
plt.scatter(x, y, label='Данные с шумом')
model = KernelRidge(alpha=0.1, gamma=0.5, kernel='rbf')
model.fit(x, y)
y_pred1 = model.predict(x)
plt.plot(x, y_ideal, c='g', linewidth=2, label='Идеальная функция')
plt.plot(x, y_pred1, c='r', label='Предсказание')
plt.title('KernelRidge')
plt.legend()
MSE = [[None, 'KernelRidge'], [None, 'SVR'], [None, 'DecisionTreeRegressor']]
MSE[0][0] = np.mean((y - y_pred1) ** 2)
plt.subplot(3, 1, 2)
plt.scatter(x, y, label='Данные с шумом')
model = SVR()
model.fit(x, y)
y_pred2 = model.predict(x)
plt.plot(x, y_ideal, c='g', linewidth=2, label='Идеальная функция')
plt.plot(x, y_pred2, c='r', label='Предсказание')
plt.title('SVR')
plt.legend()
MSE[1][0] = np.mean((y - y_pred2) ** 2)
plt.subplot(3, 1, 3)
plt.scatter(x, y, label='Данные с шумом')
model = DecisionTreeRegressor(max_depth=5)
model.fit(x, y)
y_pred3 = model.predict(x)
plt.plot(x, y_ideal, c='g', linewidth=2, label='Идеальная функция')
plt.plot(x, y_pred3, c='r', label='Предсказание')
plt.title('DecisionTreeRegressor')
plt.legend()
MSE[2][0] = mse3 = np.mean((y - y_pred3) ** 2)
for i in range(3):
    print(f'MSE для {MSE[i][1]}: {MSE[i][0]}')
MSE.sort()
print('На глаз лучше всего работает регрессия: KernelRidge')
print('На глаз хуже всего работает регрессия: SVR')
print('Меньше всего MSE (Лучше всего):',  MSE[0][1])
print('Больше всего MSE (Хуже всего):',  MSE[-1][1])
plt.tight_layout()
plt.show()
