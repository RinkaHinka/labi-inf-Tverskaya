import numpy as np
import matplotlib.pyplot as plt
import random
import math


def generate_ring_data(centers, radii, n_points=20):
    points = []
    for center, radius in zip(centers, radii):
        for _ in range(n_points):
            angle = random.uniform(0, 2 * math.pi)
            dist = random.uniform(radius * 0.8, radius * 1.2)
            x = center[0] + dist * math.cos(angle)
            y = center[1] + dist * math.sin(angle)
            points.append([x, y])
    return np.array(points)


def initialize_centroids(data, k):
    indices = np.random.choice(len(data), k, replace=False)
    return data[indices]


def euclidean_distance(a, b):
    return np.sqrt(np.sum((a - b) ** 2))


def assign_clusters(data, centroids):
    clusters = []
    for point in data:
        distances = [euclidean_distance(point, centroid) for centroid in centroids]
        cluster = np.argmin(distances)
        clusters.append(cluster)
    return np.array(clusters)


def update_centroids(data, clusters, k):
    new_centroids = []
    for i in range(k):
        cluster_points = data[clusters == i]
        if len(cluster_points) > 0:
            new_centroids.append(np.mean(cluster_points, axis=0))
        else:
            new_centroids.append(data[np.random.randint(0, len(data))])
    return np.array(new_centroids)


def kmeans(data, k=3, max_iter=100, tol=1e-4):
    centroids = initialize_centroids(data, k)
    prev_clusters = None

    for iteration in range(max_iter):
        clusters = assign_clusters(data, centroids)

        if prev_clusters is not None and np.array_equal(clusters, prev_clusters):
            print(f"Алгоритм сошелся за {iteration} итераций")
            break

        prev_clusters = clusters.copy()
        new_centroids = update_centroids(data, clusters, k)

        if np.all([euclidean_distance(new_centroids[i], centroids[i]) < tol for i in range(k)]):
            print(f"Алгоритм сошелся за {iteration} итераций (по изменению центроидов)")
            break

        centroids = new_centroids

    return centroids, clusters

centers = [(2, 3), (6, 7), (4, 8)]
radii = [1.0, 1.2, 0.8]
data = generate_ring_data(centers, radii, n_points=20)

k = 3
centroids, clusters = kmeans(data, k=k)

plt.figure(figsize=(8, 6))
plt.scatter(data[:, 0], data[:, 1], c=clusters, cmap='viridis', alpha=0.6)
plt.scatter(centroids[:, 0], centroids[:, 1], c='red', marker='x', s=100, linewidths=2)
plt.title('Результат кластеризации методом k-средних')
plt.xlabel('Ось X')
plt.ylabel('Ось Y')
plt.grid(True)
plt.show()
